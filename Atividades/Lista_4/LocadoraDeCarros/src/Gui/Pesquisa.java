/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Gui;

import Models.Cliente;
import Models.Motorista;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author henri
 */
public class Pesquisa extends javax.swing.JFrame {

    /**
     * Creates new form Pesquisa
     */
    public Pesquisa() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablePesquisa = new javax.swing.JTable();
        escolhaPesquisar = new javax.swing.JComboBox<>();
        btnSair = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tablePesquisa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "C贸digo", "Nome", "RG", "CNH", "CPF", "Telefone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablePesquisa);

        escolhaPesquisar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecionar", "Motoristas", "Clientes" }));
        escolhaPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escolhaPesquisarActionPerformed(evt);
            }
        });

        btnSair.setText("Sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(escolhaPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSair))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(escolhaPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSair)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void escolhaPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escolhaPesquisarActionPerformed
        if (escolhaPesquisar.getSelectedItem().equals("Clientes")) {
            ArrayList<Cliente> clientes = lerClientesDoArquivo();
            carregarTabelaCliente(clientes);
        } else if (escolhaPesquisar.getSelectedItem().equals("Motoristas")) {
            ArrayList<Motorista> motoristas = lerMotoristasDoArquivo();
            carregarTabelaMotorista(motoristas);
        } else {
            DefaultTableModel modelo = new DefaultTableModel(new Object[] {"C贸digo", "Nome", "RG", "CNH", "CPF", "Telefone"}, 0);
            tablePesquisa.setModel(modelo);
        }
    }//GEN-LAST:event_escolhaPesquisarActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnSairActionPerformed

    public ArrayList<Cliente> lerClientesDoArquivo() {
        ArrayList<String> linhas = new ArrayList<>();
        ArrayList<Cliente> clientes = new ArrayList<>();
        
        try (BufferedReader reader = new BufferedReader(new FileReader("src/Resources/clientes.txt"))) {
            String linha;
            while ((linha = reader.readLine()) != null) {
                linhas.add(linha);
            }

            for (String conteudo : linhas) {
                String[] partes = conteudo.split("\\.");
                int id = Integer.parseInt(partes[0]);
                String rg = partes[1];
                String cpf = partes[2];
                String nome = partes[3];
                String telefone = partes[4];

                Cliente cliente = new Cliente(id, rg, cpf, nome, telefone);
                clientes.add(cliente);
            }
        } catch (IOException e) {
            System.out.println("Erro ao ler o arquivo: " + e.getMessage());
        }
        
        return clientes;
    }
    
    public ArrayList<Motorista> lerMotoristasDoArquivo() {
        ArrayList<String> linhas = new ArrayList<>();
        ArrayList<Motorista> motoristas = new ArrayList<>();
        
        try (BufferedReader reader = new BufferedReader(new FileReader("src/Resources/motoristas.txt"))) {
            String linha;
            while ((linha = reader.readLine()) != null) {
                linhas.add(linha);
            }

            for (String conteudo : linhas) {
                String[] partes = conteudo.split("\\.");
                int id = Integer.parseInt(partes[0]);
                String nome = partes[1];
                String telefone = partes[2];
                String cnh = partes[3];

                Motorista motorista = new Motorista(id, nome, telefone, cnh);
                motoristas.add(motorista);
            }
        } catch (IOException e) {
            System.out.println("Erro ao ler o arquivo: " + e.getMessage());
        }
        
        return motoristas;
    }
    
    public void carregarTabelaCliente(ArrayList<Cliente> clientes) {
        DefaultTableModel modelo = new DefaultTableModel(new Object[] {"C贸digo", "Nome", "RG", "CNH", "CPF", "Telefone"}, 0);
        
        for (int i = 0; i < clientes.size(); i++) {
            Object linha[] = new Object[]{
                clientes.get(i).getId(),
                clientes.get(i).getNome(),
                clientes.get(i).getRg(),
                "N/a",
                clientes.get(i).getCpf(),
                clientes.get(i).getTelefone()
            };
            modelo.addRow(linha);
        }
        tablePesquisa.setModel(modelo);
    }
    
    public void carregarTabelaMotorista(ArrayList<Motorista> motoristas) {
        DefaultTableModel modelo = new DefaultTableModel(new Object[] {"C贸digo", "Nome", "RG", "CNH", "CPF", "Telefone"}, 0);
        
        for (int i = 0; i < motoristas.size(); i++) {
            Object linha[] = new Object[]{
                motoristas.get(i).getId(),
                motoristas.get(i).getNome(),
                "N/a",
                motoristas.get(i).getCnh(),
                "N/a",
                motoristas.get(i).getTelefone()
            };
            modelo.addRow(linha);
        }
        tablePesquisa.setModel(modelo);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pesquisa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pesquisa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pesquisa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pesquisa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pesquisa().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSair;
    private javax.swing.JComboBox<String> escolhaPesquisar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablePesquisa;
    // End of variables declaration//GEN-END:variables
}
